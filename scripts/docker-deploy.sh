#!/bin/bash

# Script de Deploy Docker para ACI (Automa√ß√µes Comerciais Integradas)
# Autor: ACI Team
# Vers√£o: 1.0.0

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
APP_NAME="aci-automacoes"
DOCKER_IMAGE="$APP_NAME"
VERSION=$(date +%Y%m%d-%H%M%S)

echo -e "${BLUE}üöÄ Iniciando deploy do ACI - Automa√ß√µes Comerciais Integradas${NC}"
echo -e "${BLUE}================================================${NC}"

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Docker n√£o est√° rodando. Inicie o Docker e tente novamente.${NC}"
    exit 1
fi

# Verificar se arquivo .env.local existe
if [ ! -f ".env.local" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Arquivo .env.local n√£o encontrado. Copiando de .env.example...${NC}"
    if [ -f ".env.example" ]; then
        cp .env.example .env.local
        echo -e "${YELLOW}üìù Configure suas chaves de API no arquivo .env.local antes de continuar.${NC}"
        read -p "Pressione Enter ap√≥s configurar o arquivo .env.local..."
    else
        echo -e "${RED}‚ùå Arquivo .env.example n√£o encontrado. Crie o arquivo .env.local manualmente.${NC}"
        exit 1
    fi
fi

# Parar containers existentes
echo -e "${YELLOW}üõë Parando containers existentes...${NC}"
docker-compose down 2>/dev/null || true

# Limpar imagens antigas (opcional)
read -p "Deseja remover imagens antigas? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}üßπ Removendo imagens antigas...${NC}"
    docker image prune -f
fi

# Build da nova imagem
echo -e "${BLUE}üèóÔ∏è  Construindo nova imagem...${NC}"
docker build -t $DOCKER_IMAGE:latest -t $DOCKER_IMAGE:$VERSION .

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Build conclu√≠do com sucesso!${NC}"
else
    echo -e "${RED}‚ùå Erro no build da imagem.${NC}"
    exit 1
fi

# Executar em modo produ√ß√£o
echo -e "${BLUE}üöÄ Iniciando aplica√ß√£o em modo produ√ß√£o...${NC}"
docker-compose -f docker-compose.prod.yml up -d

# Aguardar inicializa√ß√£o
echo -e "${YELLOW}‚è≥ Aguardando inicializa√ß√£o da aplica√ß√£o...${NC}"
sleep 10

# Verificar se a aplica√ß√£o est√° rodando
if docker ps | grep -q $APP_NAME; then
    echo -e "${GREEN}‚úÖ Aplica√ß√£o iniciada com sucesso!${NC}"
    
    # Health check
    echo -e "${BLUE}üîç Verificando sa√∫de da aplica√ß√£o...${NC}"
    if curl -f http://localhost/ > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Health check passou!${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Health check falhou, mas a aplica√ß√£o pode estar iniciando...${NC}"
        echo -e "${YELLOW}‚è≥ Aguardando mais 10 segundos...${NC}"
        sleep 10
        if curl -f http://localhost/ > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Health check passou na segunda tentativa!${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Aplica√ß√£o pode estar ainda inicializando. Verifique os logs.${NC}"
        fi
    fi
    
    echo -e "${GREEN}üéâ Deploy conclu√≠do com sucesso!${NC}"
    echo -e "${BLUE}üì± Acesse a aplica√ß√£o em: http://localhost${NC}"
    echo -e "${BLUE}üìä Logs: docker-compose -f docker-compose.prod.yml logs -f${NC}"
    
else
    echo -e "${RED}‚ùå Erro ao iniciar a aplica√ß√£o.${NC}"
    echo -e "${YELLOW}üìã Verificando logs...${NC}"
    docker-compose -f docker-compose.prod.yml logs --tail=20
    exit 1
fi

# Mostrar status dos containers
echo -e "${BLUE}üìä Status dos containers:${NC}"
docker ps --filter "name=$APP_NAME"

# Op√ß√£o para fazer push para DockerHub
echo
read -p "Deseja fazer push da imagem para o DockerHub? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    read -p "Digite seu username do DockerHub: " DOCKER_USERNAME
    if [ ! -z "$DOCKER_USERNAME" ]; then
        echo -e "${BLUE}üì§ Fazendo push para DockerHub...${NC}"
        docker tag $DOCKER_IMAGE:latest $DOCKER_USERNAME/$DOCKER_IMAGE:latest
        docker tag $DOCKER_IMAGE:latest $DOCKER_USERNAME/$DOCKER_IMAGE:$VERSION
        
        docker push $DOCKER_USERNAME/$DOCKER_IMAGE:latest
        docker push $DOCKER_USERNAME/$DOCKER_IMAGE:$VERSION
        
        echo -e "${GREEN}‚úÖ Push conclu√≠do!${NC}"
        echo -e "${BLUE}üê≥ Imagem dispon√≠vel em: $DOCKER_USERNAME/$DOCKER_IMAGE:latest${NC}"
    fi
fi

echo -e "${GREEN}üéä Deploy finalizado!${NC}"